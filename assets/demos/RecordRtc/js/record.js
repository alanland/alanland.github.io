// Generated by CoffeeScript 1.12.2
var captureAudio, captureAudioPlusScreen, captureAudioPlusVideo, captureScreen, captureUserMedia, captureVideo, listOfFilesUploaded, makeXMLHttpRequest, mediaContainerFormat, recordingDIV, recordingMedia, recordingPlayer, saveToDiskOrOpenNewTab, setMediaContainerFormat, uploadToServer;

recordingDIV = document.querySelector('.recordrtc');

recordingMedia = recordingDIV.querySelector('.recording-media');

recordingPlayer = recordingDIV.querySelector('video');

mediaContainerFormat = recordingDIV.querySelector('.media-container-format');

captureVideo = function(config) {
  captureUserMedia({
    video: true
  }, (function(videoStream) {
    recordingPlayer.srcObject = videoStream;
    recordingPlayer.play();
    config.onMediaCaptured(videoStream);
    videoStream.onended = function() {
      config.onMediaStopped();
    };
  }), function(error) {
    config.onMediaCapturingFailed(error);
  });
};

captureAudio = function(config) {
  captureUserMedia({
    audio: true
  }, (function(audioStream) {
    recordingPlayer.srcObject = audioStream;
    recordingPlayer.play();
    config.onMediaCaptured(audioStream);
    audioStream.onended = function() {
      config.onMediaStopped();
    };
  }), function(error) {
    config.onMediaCapturingFailed(error);
  });
};

captureAudioPlusVideo = function(config) {
  captureUserMedia({
    video: true,
    audio: true
  }, (function(audioVideoStream) {
    recordingPlayer.srcObject = audioVideoStream;
    recordingPlayer.play();
    config.onMediaCaptured(audioVideoStream);
    audioVideoStream.onended = function() {
      config.onMediaStopped();
    };
  }), function(error) {
    config.onMediaCapturingFailed(error);
  });
};

captureScreen = function(config) {
  getScreenId(function(error, sourceId, screenConstraints) {
    if (error === 'not-installed') {
      document.write('<h1><a target="_blank" href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk">Please install this chrome extension then reload the page.</a></h1>');
    }
    if (error === 'permission-denied') {
      alert('Screen capturing permission is denied.');
    }
    if (error === 'installed-disabled') {
      alert('Please enable chrome screen capturing extension.');
    }
    if (error) {
      config.onMediaCapturingFailed(error);
      return;
    }
    captureUserMedia(screenConstraints, (function(screenStream) {
      recordingPlayer.srcObject = screenStream;
      recordingPlayer.play();
      config.onMediaCaptured(screenStream);
      screenStream.onended = function() {
        config.onMediaStopped();
      };
    }), function(error) {
      config.onMediaCapturingFailed(error);
    });
  });
};

captureAudioPlusScreen = function(config) {
  getScreenId(function(error, sourceId, screenConstraints) {
    if (error === 'not-installed') {
      document.write('<h1><a target="_blank" href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk">Please install this chrome extension then reload the page.</a></h1>');
    }
    if (error === 'permission-denied') {
      alert('Screen capturing permission is denied.');
    }
    if (error === 'installed-disabled') {
      alert('Please enable chrome screen capturing extension.');
    }
    if (error) {
      config.onMediaCapturingFailed(error);
      return;
    }
    screenConstraints.audio = true;
    captureUserMedia(screenConstraints, (function(screenStream) {
      recordingPlayer.srcObject = screenStream;
      recordingPlayer.play();
      config.onMediaCaptured(screenStream);
      screenStream.onended = function() {
        config.onMediaStopped();
      };
    }), function(error) {
      config.onMediaCapturingFailed(error);
    });
  });
};

captureUserMedia = function(mediaConstraints, successCallback, errorCallback) {
  navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback)["catch"](errorCallback);
};

setMediaContainerFormat = function(arrayOfOptionsSupported) {
  var options, selectedItem;
  options = Array.prototype.slice.call(mediaContainerFormat.querySelectorAll('option'));
  selectedItem = void 0;
  options.forEach(function(option) {
    option.disabled = true;
    if (arrayOfOptionsSupported.indexOf(option.value) !== -1) {
      option.disabled = false;
      if (!selectedItem) {
        option.selected = true;
        selectedItem = option;
      }
    }
  });
};

saveToDiskOrOpenNewTab = function(recordRTC) {
  recordingDIV.querySelector('#save-to-disk').parentNode.style.display = 'block';
  recordingDIV.querySelector('#save-to-disk').onclick = function() {
    if (!recordRTC) {
      return alert('No recording found.');
    }
    recordRTC.save();
  };
  recordingDIV.querySelector('#open-new-tab').onclick = function() {
    if (!recordRTC) {
      return alert('No recording found.');
    }
    window.open(recordRTC.toURL());
  };
  recordingDIV.querySelector('#upload-to-server').disabled = false;
  recordingDIV.querySelector('#upload-to-server').onclick = function() {
    var button;
    if (!recordRTC) {
      return alert('No recording found.');
    }
    this.disabled = true;
    button = this;
    uploadToServer(recordRTC, function(progress, fileURL) {
      if (progress === 'ended') {
        button.disabled = false;
        button.innerHTML = 'Click to download from server';
        button.onclick = function() {
          window.open(fileURL);
        };
        return;
      }
      button.innerHTML = progress;
    });
  };
};

uploadToServer = function(recordRTC, callback) {
  var blob, fileName, fileType, formData;
  blob = recordRTC instanceof Blob ? recordRTC : recordRTC.blob;
  fileType = blob.type.split('/')[0] || 'audio';
  fileName = (Math.random() * 1000).toString().replace('.', '');
  if (fileType === 'audio') {
    fileName += '.' + (!!navigator.mozGetUserMedia ? 'ogg' : 'wav');
  } else {
    fileName += '.webm';
  }
  formData = new FormData;
  formData.append(fileType + '-filename', fileName);
  formData.append(fileType + '-blob', blob);
  callback('Uploading ' + fileType + ' recording to server.');
  makeXMLHttpRequest('save.php', formData, function(progress) {
    var initialURL;
    if (progress !== 'upload-ended') {
      callback(progress);
      return;
    }
    initialURL = location.href.replace(location.href.split('/').pop(), '') + 'uploads/';
    callback('ended', initialURL + fileName);
    listOfFilesUploaded.push(initialURL + fileName);
  });
};

makeXMLHttpRequest = function(url, data, callback) {
  var request;
  request = new XMLHttpRequest;
  request.onreadystatechange = function() {
    if (request.readyState === 4 && request.status === 200) {
      callback('upload-ended');
    }
  };
  request.upload.onloadstart = function() {
    callback('Upload started...');
  };
  request.upload.onprogress = function(event) {
    callback('Upload Progress ' + Math.round(event.loaded / event.total * 100) + '%');
  };
  request.upload.onload = function() {
    callback('progress-about-to-end');
  };
  request.upload.onload = function() {
    callback('progress-ended');
  };
  request.upload.onerror = function(error) {
    callback('Failed to upload to server');
    console.error('XMLHttpRequest failed', error);
  };
  request.upload.onabort = function(error) {
    callback('Upload aborted.');
    console.error('XMLHttpRequest aborted', error);
  };
  request.open('POST', url);
  request.send(data);
};

recordingDIV.querySelector('button').onclick = function() {
  var button, commonConfig, stopStream;
  button = this;
  stopStream = function() {
    if (button.stream && button.stream.stop) {
      button.stream.stop();
      button.stream = null;
    }
  };
  if (button.innerHTML === 'Stop Recording') {
    button.disabled = true;
    button.disableStateWaiting = true;
    setTimeout((function() {
      button.disabled = false;
      button.disableStateWaiting = false;
    }), 2 * 1000);
    button.innerHTML = 'Star Recording';
    if (button.recordRTC) {
      if (button.recordRTC.length) {
        button.recordRTC[0].stopRecording(function(url) {
          if (!button.recordRTC[1]) {
            button.recordingEndedCallback(url);
            stopStream();
            saveToDiskOrOpenNewTab(button.recordRTC[0]);
            return;
          }
          button.recordRTC[1].stopRecording(function(url) {
            button.recordingEndedCallback(url);
            stopStream();
          });
        });
      } else {
        button.recordRTC.stopRecording(function(url) {
          button.recordingEndedCallback(url);
          stopStream();
          saveToDiskOrOpenNewTab(button.recordRTC);
          button.recordRTC.save();
        });
      }
    }
    return;
  }
  button.disabled = true;
  commonConfig = {
    onMediaCaptured: function(stream) {
      button.stream = stream;
      if (button.mediaCapturedCallback) {
        button.mediaCapturedCallback();
      }
      button.innerHTML = 'Stop Recording';
      button.disabled = false;
    },
    onMediaStopped: function() {
      button.innerHTML = 'Start Recording';
      if (!button.disableStateWaiting) {
        button.disabled = false;
      }
    },
    onMediaCapturingFailed: function(error) {
      if (error.name === 'PermissionDeniedError' && !!navigator.mozGetUserMedia) {
        InstallTrigger.install({
          'Foo': {
            URL: 'https://addons.mozilla.org/en-US/firefox/addon/enable-screen-capturing/',
            toString: function() {
              return this.URL;
            }
          }
        });
      }
      commonConfig.onMediaStopped();
    }
  };
  if (recordingMedia.value === 'record-video') {
    captureVideo(commonConfig);
    button.mediaCapturedCallback = function() {
      button.recordRTC = RecordRTC(button.stream, {
        type: mediaContainerFormat.value === 'Gif' ? 'gif' : 'video',
        disableLogs: params.disableLogs || false,
        canvas: {
          width: params.canvas_width || 320,
          height: params.canvas_height || 240
        },
        frameInterval: typeof params.frameInterval !== 'undefined' ? parseInt(params.frameInterval) : 20
      });
      button.recordingEndedCallback = function(url) {
        recordingPlayer.src = null;
        recordingPlayer.srcObject = null;
        if (mediaContainerFormat.value === 'Gif') {
          recordingPlayer.pause();
          recordingPlayer.poster = url;
          recordingPlayer.onended = function() {
            recordingPlayer.pause();
            recordingPlayer.poster = URL.createObjectURL(button.recordRTC.blob);
          };
          return;
        }
        recordingPlayer.src = url;
        recordingPlayer.play();
        recordingPlayer.onended = function() {
          recordingPlayer.pause();
          recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
        };
      };
      button.recordRTC.startRecording();
    };
  }
  if (recordingMedia.value === 'record-audio') {
    captureAudio(commonConfig);
    button.mediaCapturedCallback = function() {
      button.recordRTC = RecordRTC(button.stream, {
        type: 'audio',
        bufferSize: typeof params.bufferSize === 'undefined' ? 0 : parseInt(params.bufferSize),
        sampleRate: typeof params.sampleRate === 'undefined' ? 44100 : parseInt(params.sampleRate),
        leftChannel: params.leftChannel || false,
        disableLogs: params.disableLogs || false,
        recorderType: webrtcDetectedBrowser === 'edge' ? StereoAudioRecorder : null
      });
      button.recordingEndedCallback = function(url) {
        var audio;
        audio = new Audio;
        audio.src = url;
        audio.controls = true;
        recordingPlayer.parentNode.appendChild(document.createElement('hr'));
        recordingPlayer.parentNode.appendChild(audio);
        if (audio.paused) {
          audio.play();
        }
        audio.onended = function() {
          audio.pause();
          audio.src = URL.createObjectURL(button.recordRTC.blob);
        };
      };
      button.recordRTC.startRecording();
    };
  }
  if (recordingMedia.value === 'record-audio-plus-video') {
    captureAudioPlusVideo(commonConfig);
    button.mediaCapturedCallback = function() {
      var audioRecorder, videoRecorder;
      if (webrtcDetectedBrowser !== 'firefox') {
        button.recordRTC = [];
        if (!params.bufferSize) {
          params.bufferSize = 16384;
        }
        audioRecorder = RecordRTC(button.stream, {
          type: 'audio',
          bufferSize: typeof params.bufferSize === 'undefined' ? 0 : parseInt(params.bufferSize),
          sampleRate: typeof params.sampleRate === 'undefined' ? 44100 : parseInt(params.sampleRate),
          leftChannel: params.leftChannel || false,
          disableLogs: params.disableLogs || false,
          recorderType: webrtcDetectedBrowser === 'edge' ? StereoAudioRecorder : null
        });
        videoRecorder = RecordRTC(button.stream, {
          type: 'video',
          disableLogs: params.disableLogs || false,
          canvas: {
            width: params.canvas_width || 320,
            height: params.canvas_height || 240
          },
          frameInterval: typeof params.frameInterval !== 'undefined' ? parseInt(params.frameInterval) : 20
        });
        videoRecorder.initRecorder(function() {
          audioRecorder.initRecorder(function() {
            audioRecorder.startRecording();
            videoRecorder.startRecording();
          });
        });
        button.recordRTC.push(audioRecorder, videoRecorder);
        button.recordingEndedCallback = function() {
          var audio;
          audio = new Audio;
          audio.src = audioRecorder.toURL();
          audio.controls = true;
          audio.autoplay = true;
          audio.onloadedmetadata = function() {
            recordingPlayer.src = videoRecorder.toURL();
            recordingPlayer.play();
          };
          recordingPlayer.parentNode.appendChild(document.createElement('hr'));
          recordingPlayer.parentNode.appendChild(audio);
          if (audio.paused) {
            audio.play();
          }
        };
        return;
      }
      button.recordRTC = RecordRTC(button.stream, {
        type: 'video',
        disableLogs: params.disableLogs || false
      });
      button.recordingEndedCallback = function(url) {
        recordingPlayer.srcObject = null;
        recordingPlayer.muted = false;
        recordingPlayer.src = url;
        recordingPlayer.play();
        recordingPlayer.onended = function() {
          recordingPlayer.pause();
          recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
        };
      };
      button.recordRTC.startRecording();
    };
  }
  if (recordingMedia.value === 'record-screen') {
    captureScreen(commonConfig);
    button.mediaCapturedCallback = function() {
      button.recordRTC = RecordRTC(button.stream, {
        type: mediaContainerFormat.value === 'Gif' ? 'gif' : 'video',
        disableLogs: params.disableLogs || false,
        canvas: {
          width: params.canvas_width || 320,
          height: params.canvas_height || 240
        }
      });
      button.recordingEndedCallback = function(url) {
        recordingPlayer.src = null;
        recordingPlayer.srcObject = null;
        if (mediaContainerFormat.value === 'Gif') {
          recordingPlayer.pause();
          recordingPlayer.poster = url;
          recordingPlayer.onended = function() {
            recordingPlayer.pause();
            recordingPlayer.poster = URL.createObjectURL(button.recordRTC.blob);
          };
          return;
        }
        recordingPlayer.src = url;
        recordingPlayer.play();
      };
      button.recordRTC.startRecording();
    };
  }
  if (recordingMedia.value === 'record-audio-plus-screen') {
    captureAudioPlusScreen(commonConfig);
    button.mediaCapturedCallback = function() {
      button.recordRTC = RecordRTC(button.stream, {
        type: 'video',
        disableLogs: params.disableLogs || false
      });
      button.recordingEndedCallback = function(url) {
        recordingPlayer.srcObject = null;
        recordingPlayer.muted = false;
        recordingPlayer.src = url;
        recordingPlayer.play();
        recordingPlayer.onended = function() {
          recordingPlayer.pause();
          recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
        };
      };
      button.recordRTC.startRecording();
    };
  }
};

recordingMedia.onchange = function() {
  if (this.value === 'record-audio') {
    setMediaContainerFormat(['WAV', 'Ogg']);
    return;
  }
  setMediaContainerFormat(['WebM', 'Gif']);
};

if (webrtcDetectedBrowser === 'edge') {
  console.warn('Neither MediaRecorder API nor webp is supported in Microsoft Edge. You cam merely record audio.');
  recordingMedia.innerHTML = '<option value="record-audio">Audio</option>';
  setMediaContainerFormat(['WAV']);
}

if (webrtcDetectedBrowser === 'firefox') {
  recordingMedia.innerHTML = '<option value="record-audio-plus-video">Audio+Video</option>' + '<option value="record-audio-plus-screen">Audio+Screen</option>' + recordingMedia.innerHTML;
}

if (false && webrtcDetectedBrowser === 'chrome') {
  recordingMedia.innerHTML = '<option value="record-audio-plus-video">Audio+Video</option>' + recordingMedia.innerHTML;
  console.info('This RecordRTC demo merely tries to playback recorded audio/video sync inside the browser. It still generates two separate files (WAV/WebM).');
}

listOfFilesUploaded = [];

window.onbeforeunload = function() {
  recordingDIV.querySelector('button').disabled = false;
  recordingMedia.disabled = false;
  mediaContainerFormat.disabled = false;
  if (!listOfFilesUploaded.length) {
    return;
  }
  listOfFilesUploaded.forEach(function(fileURL) {
    var formData, request;
    request = new XMLHttpRequest;
    request.onreadystatechange = function() {
      if (request.readyState === 4 && request.status === 200) {
        if (this.responseText === ' problem deleting files.') {
          alert('Failed to delete ' + fileURL + ' from the server.');
          return;
        }
        listOfFilesUploaded = [];
        alert('You can leave now. Your files are removed from the server.');
      }
    };
    request.open('POST', 'delete.php');
    formData = new FormData;
    formData.append('delete-file', fileURL.split('/').pop());
    request.send(formData);
  });
  return 'Please wait few seconds before your recordings are deleted from the server.';
};

//# sourceMappingURL=record.js.map
